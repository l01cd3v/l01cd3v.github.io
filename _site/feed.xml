<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>l01cd3v.github.io</title>
    <description></description>
    <link>https://l01cd3v.github.io</link>
    <atom:link href="https://l01cd3v.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Introducing opinel: Scout2's favorite tool</title>
        <description>&lt;p&gt;With boto3 being stable and generally available&lt;sup&gt;&lt;a href=&quot;https://aws.amazon.com/about-aws/whats-new/2015/06/boto3-aws-sdk-for-python-version-3-is-now-generally-available&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;, I took the opportunity
to migrate Scout2 and AWS-recipes to boto3. As part of that migration
effort, I decided to publish the formerly-known-as AWSUtils repository -- used
by Scout2 and AWS-recipes -- as a python package required by these tools,
rather than requiring users to work with Git submodules. I&amp;#39;ve also added more
flexibility when working with MFA-protected API calls and improved versioning
across the project.&lt;/p&gt;

&lt;h3&gt;opinel&lt;/h3&gt;

&lt;p&gt;To avoid name conflicts, I decided to rename the shared AWSUtils code to a
less misleading name: opinel. The opinel package is published on &lt;a href=&quot;https://pypi.python.org/pypi/opinel&quot;&gt;PyPI&lt;/a&gt;, and thus can
be installed using pip and easy_install. The corresponding source code is still
open-sourced on Github at &lt;a href=&quot;https://github.com/iSECPartners/opinel&quot;&gt;https://github.com/iSECPartners/opinel&lt;/a&gt;.
As a result, Scout2 and AWS-recipes have been modified to list opinel as a
requirement, which significantly simplifies installation and management of this
shared code.&lt;/p&gt;

&lt;h3&gt;Support for Python 2.7 and 3.x&lt;/h3&gt;

&lt;p&gt;Because boto3 supports both Python2 and Python3, I decided to make sure that
the code built on top of that package has similar properties. As a result,
the latest versions of Scout2 and AWS-recipes support Python 2.7 and 3.x.
Note that opinel will &lt;strong&gt;NOT&lt;/strong&gt; work with Python 2.6.&lt;/p&gt;

&lt;h3&gt;Modification of the MFA workflow&lt;/h3&gt;

&lt;p&gt;As requested by a user of AWS-recipes&lt;sup&gt;&lt;a href=&quot;https://github.com/iSECPartners/opinel/issues/4&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, I modified the workflow when
using MFA-protected API access to no longer store the long-lived credentials
in a separate file. As a result, the &lt;em&gt;.aws/credentials.no-mfa&lt;/em&gt; file is no
longer supported and all credentials are stored in the standard AWS credentials
file under &lt;em&gt;.aws/credentials&lt;/em&gt;. Usage of the existing tools remains unchanged,
but the long-lived credentials are now accessible via a new profile name:
&lt;em&gt;profile_name-nomfa&lt;/em&gt;. This allows users to work with both STS and long-lived
credentials if need be.&lt;/p&gt;

&lt;p&gt;If you already had configured your environment to work with MFA-protected API
access, you will need to copy your long-lived credentials back to the
&lt;em&gt;.aws/credentials&lt;/em&gt; file. This can be done with a simple command such as the
following:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cat ~/.aws/credentials.no-mfa | sed -e &amp;#39;s/]$/-nomfa]/g&amp;#39; &amp;gt;&amp;gt; ~/.aws/credentials
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Support to use assumed-role credentials&lt;/h3&gt;

&lt;p&gt;With this new workflow implemented, I created a new recipe that allows
configuration of role-credentials in the &lt;em&gt;.aws/credentials&lt;/em&gt; file. When the following
command is run, it uses the credentials associated with the &lt;em&gt;isecpartners&lt;/em&gt;
profile to request role credentials for the IAM-Scout2 role. The role
credentials are then written in the &lt;em&gt;.aws/credentials&lt;/em&gt; file in a new profile
named &lt;em&gt;isecpartners-Scout2&lt;/em&gt;, which is the profile name appended by the role
session name.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./aws_recipes_assume_role.py --profile isecpartners --role-arn arn:aws:iam::AWS_ACCOUNT_ID:role/IAM-Scout2 --role-session-name Scout2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Users can then use their favorite tools that support profiles. For example,
Scout2 could be run with the following command line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./Scout2.py --profile isecpartners-Scout2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that this recipe supports MFA if the assumed role requires it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you never configured your environment to work with MFA, you can provide your MFA serial number (ARN) and current token code as arguments.&lt;/li&gt;
&lt;li&gt;If you already configured your environment to work with MFA and stored your MFA serial in the &lt;em&gt;.aws/credentials&lt;/em&gt; file, you just need to pass your token code as an additional argument.&lt;/li&gt;
&lt;li&gt;Finally, if you already initiated an STS session, you do not need to provide a new token code and can run the command as above.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;With the release of opinel, I hope to simplify distribution and management of
the code shared between Scout2 and AWS-recipes. Additionally, I
significantly modified the workflow and credentials storage when working with
MFA-protected API calls, which allows users to use both their long-lived and STS
credentials.&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Aug 2015 11:08:00 -0700</pubDate>
        <link>https://l01cd3v.github.io/aws/2015/08/03/boto3_opinel_scout_recipes.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/aws/2015/08/03/boto3_opinel_scout_recipes.html</guid>
      </item>
    
      <item>
        <title>IAM user management strategy (part 2)</title>
        <description>&lt;p&gt;The previous &lt;a href=&quot;/aws/2015/02/24/iam_user_management.html&quot;&gt;IAM user management strategy&lt;/a&gt; post discussed how
usage of IAM groups enables AWS administrators to consistently grant privileges
and enforce a number of security rules (such as MFA-protected API access). This
blog post will build on this idea by introducing category groups and
documenting new tools to improve IAM user management.&lt;/p&gt;

&lt;h3&gt;Categorize your IAM users&lt;/h3&gt;

&lt;p&gt;For a variety of reasons, applying a single set of security rules to all IAM
users is not always practical. For example, because many applications running
in AWS predate IAM roles, numerous environments still rely on the existence of
headless IAM users. Additionally, third parties may be granted access to an AWS
account for a number of reasons but may not be able to comply with the same set
of security rules that employees follow. For this reason, NCC recommends using
category groups to sort IAM users and reliably enforce appropriate security
measures. For example, one group for all human users and a second for all headless users may be
created: MFA-protected API access and password management are not relevant for
headless users. Furthermore, human users may be categorized into several groups
such as employees and contractors: API access can be restricted to the
corporate IP range for employees but might not be achievable for contractors.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note 1:&lt;/em&gt; The set of category groups should define all types of IAM users that
may exist in your AWS account and each IAM user should belong to one -- and
only one -- category group (they may belong to other groups though).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note 2:&lt;/em&gt; The common group and category groups should be used to enable enforcing
security in one&amp;#39;s AWS environment. Policies attached to these groups should be
carefully reviewed and grant the minimum set of privileges necessary for this
type of IAM user (&lt;em&gt;e.g.&lt;/em&gt; credential management for humans).&lt;/p&gt;

&lt;h3&gt;Example of category groups&lt;/h3&gt;

&lt;p&gt;The rest of this article describes a number of tools developed and used by
NCC to help implement this IAM user management strategy. These tools can be found
in the &lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes&quot;&gt;AWS-Recipes&lt;/a&gt; repository. We will 
use our test AWS environment as an example, in which we use three category groups in
addition to the &lt;em&gt;AllUsers&lt;/em&gt; common group:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;AllHumans&lt;/em&gt;, the group all employees must belong to.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;AllHeadlessUsers&lt;/em&gt;, the group all headless IAM users must belong to.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;AllMisconfiguredUsers&lt;/em&gt;, a placeholder for sample misconfigured users.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We also have an IAM user naming convention that requires usernames to match the
following schema:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Employees: firstname initial appended with lastname&lt;/li&gt;
&lt;li&gt;Headless user: name of the service prefixed with &lt;em&gt;HeadlessUser-&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Misconfigured: description of the misconfiguration prefixed with &lt;em&gt;MisconfiguredUser-&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Based on these rules, we created a configuration file stored under
&lt;em&gt;.aws/recipes/isecpartners.json&lt;/em&gt;, with &lt;em&gt;isecpartners&lt;/em&gt; matching the profile&amp;#39;s
name. If you do not use profiles, the configuration will be under
&lt;em&gt;.aws/recipes/default.json&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
    &amp;quot;common_groups&amp;quot;: [ &amp;quot;AllUsers&amp;quot; ],
    &amp;quot;category_groups&amp;quot;: [
        &amp;quot;AllHumanUsers&amp;quot;,
        &amp;quot;AllHeadlessUsers&amp;quot;,
        &amp;quot;AllMisconfiguredUsers&amp;quot;
    ],
    &amp;quot;category_regex&amp;quot;: [
        &amp;quot;&amp;quot;,
        &amp;quot;^Headless-(.*)&amp;quot;,
        &amp;quot;^MisconfiguredUser-(.*)&amp;quot;
    ],
    &amp;quot;profile_name&amp;quot;: [ &amp;quot;isecpartners&amp;quot; ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This configuration file declares the name of the common IAM group and two lists
related to the categorization of IAM users:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A list of category groups.&lt;/li&gt;
&lt;li&gt;A list of regular expressions matching our naming convention.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;em&gt;Note 1:&lt;/em&gt; If you do not have a naming convention in place to distinguish the
type of user, remove the &lt;em&gt;category_regex&lt;/em&gt; attribute from your configuration
file.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note 2:&lt;/em&gt; If a regular expression is only applicable to a subset of category
groups, you must ensure that both lists have the same length and use an empty
string for groups that cannot be automatically associated (see the
&lt;em&gt;AllHumanUsers&lt;/em&gt; group in our example).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note 3:&lt;/em&gt; Use of a configuration file is not necessary as all values may be
passed as command line arguments. If a configuration file exists and a value is
passed as an argument, the value passed via the command line will be used.&lt;/p&gt;

&lt;h3&gt;Create your default groups with &lt;em&gt;&lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes/blob/master/Python/aws_iam_create_default_groups.py&quot;&gt;aws_iam_create_default_groups.py&lt;/a&gt;&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;The purpose of this tool is to create IAM groups whose name matches the common
and category groups specified in the above configuration file. Running the
following command results in four new groups being created if they did not
already exist.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;./aws_iam_create_default_groups.py --profile isecpartners
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;(Automatically) sort IAM users with &lt;em&gt;&lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes/blob/master/Python/aws_iam_sort_users.py&quot;&gt;aws_iam_sort_users.py&lt;/a&gt;.&lt;/em&gt;&lt;/h3&gt;

&lt;p&gt;This tool iterates through all IAM users and attempts to automatically detect
the IAM groups each user should belong to. For convenience, we recommend adding
the following to your AWS recipes configuration files:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;aws_sort_users.py&amp;quot;: {
    &amp;quot;create_groups&amp;quot;: false,
},
&amp;quot;force_common_group&amp;quot;: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This specifies default values for additional arguments to be set when running
&lt;em&gt;aws_iam_sort_users.py&lt;/em&gt;. Specifically, with these values, running this tool
will automatically add all IAM users to the common group &lt;em&gt;AllUsers&lt;/em&gt; and will
not attempt to create the default groups (not necessary as we already did
this). Additionally, this tool checks that each IAM user belongs to one of the
category groups. If this is not the case and the username matches a regular
expression, the user is automatically added to the matching category group. Otherwise, a
multi-choice prompt appears to allow manual selection of the appropriate
category group.&lt;/p&gt;

&lt;h3&gt;Additional advantages of configuration files&lt;/h3&gt;

&lt;p&gt;Besides helping with simplification of these tools&amp;#39; usage, this new AWS-recipe
configuration file can be used across tools, allowing for more consistent
rule enforcement. For example, the
&lt;em&gt;&lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes/blob/master/Python/aws_iam_create_user.py&quot;&gt;aws_iam_create_user.py&lt;/a&gt;.&lt;/em&gt;
tool uses this configuration file and applies the same business logic to add
users to the common group and appropriate category group at user creation time. In
our test environment, for example, running the following command automatically
added the new user to the &lt;em&gt;MisconfiguredUser&lt;/em&gt; group:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./aws_iam_create_user.py --profile isecpartners --users MisconfiguredUser-BlogPostExample
Creating user MisconfiguredUser-BlogPostExample...
Save unencrypted value (y/n)? y
User &amp;#39;MisconfiguredUser-BlogPostExample&amp;#39; does not belong to the mandatory common group &amp;#39;AllUsers&amp;#39;. Do you want to remediate this now (y/n)? y
User &amp;#39;MisconfiguredUser-BlogPostExample&amp;#39; does not belong to any of the category group (AllHumanUsers, AllHeadlessUsers, AllMisconfiguredUsers). Automatically adding...
Enabling MFA for user MisconfiguredUser-BlogPostExample...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;While efficient and reliable management of IAM users can be challenging, using
the right strategy and tools significantly simplifies this process. Creation
and use of a naming convention for IAM users enables
automated user management and enforcement of security rules.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jun 2015 09:20:00 -0700</pubDate>
        <link>https://l01cd3v.github.io/aws/2015/06/09/iam_user_management_2.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/aws/2015/06/09/iam_user_management_2.html</guid>
      </item>
    
      <item>
        <title>Work daily with enforced MFA-protected API access</title>
        <description>&lt;h3&gt;AWS Security Token Service&lt;/h3&gt;

&lt;p&gt;The AWS Security Token Service (STS) is the gateway used to create sessions
when MFA-protected API access is enabled. This service allows IAM users to
retrieve short-lived credentials (&lt;em&gt;i.e&lt;/em&gt; access key ID, secret access key, and
session token) in exchange for their long-lived credentials (&lt;em&gt;i.e.&lt;/em&gt; AWS access
key ID and secret key) and their current authentication code. When enforcing
MFA-protected API access, as recommended in the previous &lt;a href=&quot;/aws/2015/04/02/use_and_enforce_mfa.html&quot;&gt;Use and enforce
Multi-Factor
Authentication&lt;/a&gt; post,
IAM users must use these short-lived credentials to access other AWS services.&lt;/p&gt;

&lt;h3&gt;Challenges with MFA-protected API access&lt;/h3&gt;

&lt;p&gt;When MFA-protected API access is enforced, managing AWS access keys becomes
challenging because configuration files that contain these credentials must be
updated regularly. Users must also ensure that they do not lose their
long-lived credentials when modifying the configuration files to write their
short-lived credentials. In order to help with this workflow, iSEC wrote and
released several simple tools in the
&lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes&quot;&gt;AWS-recipes&lt;/a&gt; repository.&lt;/p&gt;

&lt;p&gt;The collection of tools that we will discussed below uses the &amp;quot;&lt;a
target=&quot;_blank&quot;
href=&quot;https://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs&quot;&gt;new
and standardized way to manage credentials in the AWS SDKs&lt;/a&gt;&amp;quot;, meaning that
SDKs are expecting to read credentials from the &lt;em&gt;.aws/credentials&lt;/em&gt; file under
the user&amp;#39;s home or  profile directory.&lt;/p&gt;

&lt;h3&gt;aws_recipes_configure_iam.py&lt;/h3&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes/blob/master/Python/aws_recipes_configure_iam.py&quot;&gt;aws_recipes_configure_iam.py&lt;/a&gt;
tool allows users to configure and store their long-lived credentials in a new,
non-standard, &lt;em&gt;.aws/credentials.no-mfa&lt;/em&gt; file. In addition to prompting for the
AWS access key ID and secret key, this tool also prompts for the MFA device
serial number because this information must be provided when making calls to
the STS API. Similar to the AWS CLI and SDKs, it supports profile names. The
following code snippet is an example of calling this tool to configure a new
profile called &lt;em&gt;isecpartners&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./aws_recipes_configure_iam.py --profile isecpartners
AWS Access Key ID: AWS_KEY_ID
AWS Secret Access Key: AWS_SECRET_KEY
AWS MFA serial: arn:aws:iam::AWS_ACCOUNT_ID:mfa/USER_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When looking at the &lt;em&gt;.aws&lt;/em&gt; folder, we can see that a &lt;em&gt;credentials.no-mfa&lt;/em&gt; file
exists and that it contains the credentials that were just entered:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ls -l ~/.aws
total 4
-rw-r--r-- 1 loic loic 93 Apr  3 14:00 credentials.no-mfa
$ cat ~/.aws/credentials.no-mfa
[isecpartners]
aws_access_key_id = AWS_KEY_ID
aws_secret_access_key = AWS_SECRET_KEY
aws_mfa_serial = arn:aws:iam::AWS_ACCOUNT_ID:mfa/USER_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that long-lived credentials are configured, we can use the next tool to
call the AWS STS API and request short-lived credentials that will be used
to access other AWS services.&lt;/p&gt;

&lt;h3&gt;aws_recipes_init_sts_session.py&lt;/h3&gt;

&lt;p&gt;The
&lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes/blob/master/Python/aws_recipes_init_sts_session.py&quot;&gt;aws_recipes_init_sts_session.py&lt;/a&gt;
tool reads long-lived credentials configured in the .aws/credentials.no-mfa
file, prompts users for their MFA code, and retrieves STS credentials (AWS
access key ID, AWS secret key, and session token). The short-lived credentials
are then saved under the standardized &lt;em&gt;.aws/credentials&lt;/em&gt; file to be accessible
to the AWS CLI and other tools built with the AWS SDKs. The following code
snippet demonstrates calling this tool to request an STS session token:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ./aws_recipes_init_sts_session.py --profile isecpartners
Enter your MFA code: 123456
Successfully configured the session token for profile &amp;#39;isecpartners&amp;#39;.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When looking at the &lt;em&gt;.aws&lt;/em&gt; folder, we can see that a standard &lt;em&gt;credentials&lt;/em&gt;
file now exists as well and that it contains the short-lived credentials:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ ls -l ~/.aws
total 8
-rw-r--r-- 1 loic loic 576 Apr  3 14:14 credentials
-rw-r--r-- 1 loic loic 179 Apr  3 14:00 credentials.no-mfa
$ cat ~/.aws/credentials
[isecpartners]
aws_access_key_id = STS_KEY_ID
aws_secret_access_key = STS_SECRET_KEY
aws_mfa_serial = arn:aws:iam::AWS_ACCOUNT_ID:mfa/USER_NAME
aws_session_token = AWS//////////SESSION_TOKEN
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that the short-lived credentials are configured, we can use the AWS CLI or
other tools built with the AWS SDKs that read credentials from this standard
location. When the STS session expires, users just need to re-run the
&lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes/blob/master/Python/aws_recipes_init_sts_session.py&quot;&gt;aws_recipes_init_sts_session.py&lt;/a&gt;
tool and the standard &lt;em&gt;credentials&lt;/em&gt; file will be updated with new valid
short-lived credentials.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;By using this pair of tools to manage their AWS access keys, IAM users can
easily use the AWS CLI and other tools built with various AWS SDKs in
environments that have been secured and enforce MFA-protected API access.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2015 14:10:00 -0700</pubDate>
        <link>https://l01cd3v.github.io/aws/2015/04/03/session_management_tools.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/aws/2015/04/03/session_management_tools.html</guid>
      </item>
    
      <item>
        <title>Use and enforce Multi-Factor Authentication</title>
        <description>&lt;h3&gt;What is Multi-Factor Authentication?&lt;/h3&gt;

&lt;p&gt;When enabled, Multi-Factor Authentication (MFA) provides strong
defense-in-depth against compromises of credentials. MFA-enabled users have a
device that periodically generates a new authentication code (&lt;em&gt;i.e.&lt;/em&gt; one-time
password); they need to enter the current authentication code along with their
static credentials (&lt;em&gt;i.e.&lt;/em&gt; username and password) in order to successfully
authenticate. In addition to supporting MFA when accessing the web console
(&lt;em&gt;i.e.&lt;/em&gt; password-based authentication), AWS also offers MFA-protected API
access for users who work with AWS access keys. Through the Security Token
Service (STS), IAM users can request temporary credentials in exchange for
their long-lived credentials (&lt;em&gt;i.e.&lt;/em&gt; AWS access key ID and secret key) and
their current authentication code.&lt;/p&gt;

&lt;h3&gt;Why should one use and enforce MFA?&lt;/h3&gt;

&lt;p&gt;For companies deploying their application in the cloud, a breach that results
in unauthorized access to the management console &amp;mdash; or API &amp;mdash; is the
worst-case scenario. While a number of AWS administrators have realized the
importance of enabling MFA when they access the web console, a limited number
of them enforce MFA-protected API access. This represents a huge gap in one&amp;#39;s
security posture because AWS access keys do not come with as many security
features as passwords do:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;AWS administrators can enforce password expiration; this is currently not
possible for AWS access keys.&lt;/li&gt;
&lt;li&gt;While it is probably safe to assume that most AWS administrators do not store
their password in plaintext, most of them use AWS access keys. By design, these
keys are meant to be stored in plaintext files that are accessed by tools built
with the various AWS SDKs.&lt;/li&gt;
&lt;li&gt;A lost password is a forgotten password; a lost key is a key stored in a lost
file, which may be on an unencrypted storage device (e.g. hard drive or USB Flash
drive).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because AWS access keys are long-lived credentials that are stored in plaintext
files, they are more susceptible to compromise than passwords. It is therefore
necessary to enable MFA when the AWS API is accessed using these keys and not
only when users sign in using their passwords.&lt;/p&gt;

&lt;h3&gt;How can one enforce MFA?&lt;/h3&gt;

&lt;p&gt;Unfortunately, at time of writing, AWS does not offer an option to enforce
MFA-protected API access via a global setting. Therefore, AWS account
administrators must carefully manage their IAM users and develop a strategy to
reliably achieve this. In order to enforce MFA-protected API access, iSEC
recommends the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a common IAM group that all IAM users belong to, as discussed in the previous &lt;a href=&quot;/aws/2015/02/24/iam_user_management.html&quot;&gt;IAM user management strategy&lt;/a&gt; post.&lt;/li&gt;
&lt;li&gt;Add the following policy (also available on &lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes/blob/master/IAM-Policies/EnforceMFA-8HourSession.json&quot;&gt;Github&lt;/a&gt;) to enforce MFA for all users who belong to this group.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This policy will enforce MFA regardless of how the IAM user authenticated with
AWS; it will be effective whether they use password-based or key-based
authentication.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Effect&amp;quot;: &amp;quot;Deny&amp;quot;,
      &amp;quot;Action&amp;quot;: &amp;quot;*&amp;quot;,
      &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot;,
      &amp;quot;Condition&amp;quot;: {
        &amp;quot;Null&amp;quot;:{&amp;quot;aws:MultiFactorAuthAge&amp;quot;:&amp;quot;true&amp;quot;}
      }
    },
    {
      &amp;quot;Effect&amp;quot;: &amp;quot;Deny&amp;quot;,
      &amp;quot;Action&amp;quot;: &amp;quot;*&amp;quot;,
      &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot;,
      &amp;quot;Condition&amp;quot;: {
        &amp;quot;NumericGreaterThan&amp;quot;:{&amp;quot;aws:MultiFactorAuthAge&amp;quot;:&amp;quot;28800&amp;quot;}
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first statement in the above policy denies all actions if the
&lt;em&gt;aws:MultiFactorAuthAge&lt;/em&gt; key is not present; this key only exists if MFA is
used [1].&lt;/p&gt;

&lt;p&gt;The second statement verifies that the validation of the MFA code was performed
less than eight hours ago. Temporary credentials may be valid for a duration
between fifteen minutes and thirty-six hours [2]. iSEC recommends requiring
users to initiate a new session at least once a day.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; An &amp;quot;explicit deny&amp;quot; means that, regardless of other policies granted
to a user, this deny rule will prevail. More information about the IAM policy
evaluation logic can be found in the AWS documentation at &lt;a
target=&quot;_blank&quot;
href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/AccessPolicyLanguage_EvaluationLogic.html&quot;&gt;http://docs.aws.amazon.com/IAM/latest/UserGuide/AccessPolicyLanguage_EvaluationLogic.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Use AWS Scout2 to detect users without MFA&lt;/h3&gt;

&lt;p&gt;The default ruleset used by &lt;a href=&quot;https://github.com/iSECPartners/Scout2&quot;&gt;AWS Scout2&lt;/a&gt; includes a rule that checks for IAM users who have password-based authentication enabled but do not have an MFA device configured. If Scout2 detects IAM users with password-based authentication enabled and no MFA device, it will document a &amp;quot;Lack of MFA&amp;quot; security risk in the IAM menu dropdown, as illustrated in the below screenshot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws/awsscout2-user-nomfa-1.png&quot; alt=&quot;Screenshot: IAM menu dropdown with a &amp;quot;Lack of MFA&amp;quot; security risk&quot;&gt;&lt;/p&gt;

&lt;p&gt;When clicked, this &amp;quot;Lack of MFA&amp;quot; link filters the list of IAM users to display
those who have password-based authentication enabled but no MFA device
configured. The red &amp;quot;No&amp;quot; following &amp;quot;Multi-Factor enabled&amp;quot; indicates a danger
tied to that particular IAM user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws/awsscout2-user-nomfa-2.png&quot; alt=&quot;Screenshot: Red &amp;quot;No&amp;quot; indicating that this IAM user may access the web console without MFA&quot;&gt;&lt;/p&gt;

&lt;h3&gt;How can one use MFA with command line tools?&lt;/h3&gt;

&lt;p&gt;Users of the AWS CLI (and other command line tools) have several methods to
configure their credentials, such as environment variables, configuration
files, or command line arguments. However, updating these settings on a daily
basis when MFA-protected API access is enabled is inconvenient. To help
facilitate this work flow, iSEC has created a set of Python tools and released
them in the &lt;a href=&quot;https://github.com/iSECPartners/AWS-recipes&quot;&gt;AWS-recipes&lt;/a&gt;
repository. Further details about these tools will be published in the next
blog post.&lt;/p&gt;

&lt;p&gt;Additional information about MFA with AWS is available in the AWS
documentation at &lt;a target=&quot;_blank&quot;
href=&quot;https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingMFA.html&quot;&gt;
https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingMFA.html&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Enforcing Multi-Factor Authentication for all IAM users is extremely important
in order to mitigate the risks of credentials compromise (especially the AWS
access key ID and secret). This aspect of security is commonly overlooked and
may result in catastrophic damages. By using a strict strategy for management
of IAM users and the above IAM policy, AWS administrators may significantly
reduce risks of account compromise.&lt;/p&gt;

&lt;p&gt;[1] &lt;a target=&quot;_blank&quot; href=&quot;http://docs.aws.amazon.com/IAM/latest/UserGuide/AccessPolicyLanguage_ElementDescriptions.html#AvailableKeys&quot;&gt;http://docs.aws.amazon.com/IAM/latest/UserGuide/AccessPolicyLanguage_ElementDescriptions.html#AvailableKeys&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[2] &lt;a target=&quot;_blank&quot; href=&quot;http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html&quot;&gt;http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Apr 2015 14:10:00 -0700</pubDate>
        <link>https://l01cd3v.github.io/aws/2015/04/02/use_and_enforce_mfa.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/aws/2015/04/02/use_and_enforce_mfa.html</guid>
      </item>
    
      <item>
        <title>IAM user management strategy</title>
        <description>&lt;h3&gt;Use IAM groups&lt;/h3&gt;

&lt;p&gt;When granting privileges to IAM users, AWS account administrators should avoid
use of user-specific policies. Instead, create groups whose name explicitly
defines the members&amp;#39; job functions or responsibilities (&lt;em&gt;e.g.&lt;/em&gt; AWS
Administrators, Operations, Developers, Accountants), and define the
permissions granted within group policies. Doing so will simplify the
permissions management process as changes in group policies apply to all
members.&lt;/p&gt;

&lt;p&gt;When performing AWS configuration reviews, iSEC often discovers IAM users
whose privileges have been granted via a combination of IAM user and IAM group
policies. It is not uncommon to see IAM users who are granted full
administrator privileges in a redundant manner, via both user and group
policies. Such configuration creates an avenue for configuration mistakes, as
another administrator may believe that terminating an IAM user&amp;#39;s membership to
the admin group is sufficient. Therefore, banning use of IAM user policies
will result in making one&amp;#39;s AWS environment less error-prone.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: It is on purpose that iSEC recommends using IAM group names that
reflect a job title or responsibility. IAM users who do not fit in such groups
(&lt;em&gt;e.g.&lt;/em&gt; headless users) should not exist. Instead, AWS account administrators
should investigate use of IAM roles for EC2. Further details will be discussed
in an upcoming blog post.&lt;/p&gt;

&lt;h3&gt;Create a common IAM group to apply generic policies&lt;/h3&gt;

&lt;p&gt;Because a number of policies must be applied to all users, iSEC recommends that
AWS account administrators create an IAM group that all IAM users belong to.
Doing so will allow AWS account administrators to consistently grant privileges
and enforce a number of rules.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: It is important that all IAM users belong to this common IAM group
to ensure that policies are consistently applied. Failure to do so will create
gaps in one&amp;#39;s AWS environment security posture.&lt;/p&gt;

&lt;h3&gt;Authorize IAM users to manage their credentials&lt;/h3&gt;

&lt;p&gt;To begin with, iSEC recommends that AWS account administrators allow all of
their IAM users to manage their credentials, and only theirs. With all IAM
users belonging to the common IAM group, this can be achieved by applying the
following IAM policy to the group.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
  &amp;quot;Statement&amp;quot;: [
    {
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;: [
                 &amp;quot;iam:*AccessKey*&amp;quot;,
                 &amp;quot;iam:*Password&amp;quot;,
                 &amp;quot;iam:*MFADevice*&amp;quot;,
                 &amp;quot;iam:UpdateLoginProfile&amp;quot;
        ],
      &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:iam::AWS_ACCOUNT_ID:user/${aws:username}&amp;quot;
    },
    {
      &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
      &amp;quot;Action&amp;quot;: [
                 &amp;quot;iam:CreateVirtualMFADevice&amp;quot;,
                 &amp;quot;iam:DeleteVirtualMFADevice&amp;quot;
      ],
      &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:iam::AWS_ACCOUNT_ID:mfa/${aws:username}&amp;quot;
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While the above policy is sufficient to allow users to manage their
credentials, AWS administrators may consider the following statement as an
addition; it allows IAM users to know what the account&amp;#39;s password policy is.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
  &amp;quot;Action&amp;quot;: &amp;quot;iam:GetAccountPasswordPolicy&amp;quot;,
  &amp;quot;Resource&amp;quot;: &amp;quot;*&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Use AWS Scout2 to detect user policies&lt;/h3&gt;

&lt;p&gt;The default ruleset used by &lt;a href=&quot;https://github.com/iSECPartners/Scout2&quot;&gt;AWS
Scout2&lt;/a&gt; includes a rule that checks for
user policies and reports the use of user-specific IAM policies as a warning.
Detection of user-specific IAM policies results in the IAM menu dropdown
containing a &amp;quot;User policies&amp;quot; security risk, as illustrated in the below screenshot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws/awsscout2-iam-user-policy-1.png&quot; alt=&quot;Screenshot: IAM menu dropdown with a User policies security risk&quot;&gt;&lt;/p&gt;

&lt;p&gt;When clicked-on, this &amp;quot;User policies&amp;quot; link filters the list of IAM users to only
display those who have at least one user policy attached. The orange badge
indicates a warning and the count of user policies attached to this particular
IAM user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws/awsscout2-iam-user-policy-2.png&quot; alt=&quot;Screenshot: Orange badge indicating that at least one user policy is attached to that IAM user&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Check that all IAM users belong to the common group&lt;/h3&gt;

&lt;p&gt;AWS Scout2 comes with a tool — RulesGenerator.py — that allows AWS account
administrators to generate a custom ruleset to tailor the report to their
needs. An optional IAM rule requires all IAM users to belong to a common IAM
group. In order to enable this rule, the following can be done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the rules generator with the following command line:
&lt;pre style=&quot;margin-left: -20px; margin-top: 10px; margin-bottom: 10px&quot;&gt;&lt;code&gt;./RulesGenerator.py --ruleset_name isec --services iam&lt;/pre&gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Answer &amp;quot;yes&amp;quot; to the question &amp;quot;Would you like to ensure that all IAM users belong to a given IAM group?&amp;quot;&lt;/li&gt;
&lt;li&gt;Enter the name of your common group (&lt;em&gt;e.g.&lt;/em&gt; AllUsers)&lt;/li&gt;
&lt;li&gt;Enter &amp;quot;yes&amp;quot; or &amp;quot;y&amp;quot; to confirm&lt;/li&gt;
&lt;li&gt;Change the level if desired&lt;/li&gt;
&lt;li&gt;Run Scout2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note&lt;/em&gt;&lt;/strong&gt;: If you have already run Scout2 and do not wish to download the latest
IAM configuration, use the following command to run an offline analysis:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;./Scout2.py --ruleset_name isec --services iam --local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following screenshot illustrates the IAM menu dropdown containing a
security risk when IAM users do not belong to the configured common group.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws/awsscout2-iam-user-commongroup-1.png&quot; alt=&quot;Screenshot: IAM menu dropdown when IAM users do not belong to the common group&quot;&gt;&lt;/p&gt;

&lt;p&gt;When clicked-on, this link filters the list of IAM users to only display those
who do not belong to the common IAM group. A colored warning sign appears,
warning about this issue.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/aws/awsscout2-iam-user-commongroup-2.png&quot; alt=&quot;Screenshot: Orange badge indicating that at least one user policy is attached to that IAM user&quot;&gt;&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Strict management of IAM users and tight control of their privileges is key in
maintaining a secure AWS environment. When followed, the above recommendations
should enable AWS administrators to manage IAM users with improved efficiency
and lower the chances of overly privileged users to exist.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Feb 2015 20:49:00 -0800</pubDate>
        <link>https://l01cd3v.github.io/aws/2015/02/24/iam_user_management.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/aws/2015/02/24/iam_user_management.html</guid>
      </item>
    
      <item>
        <title>Do not use your AWS root account</title>
        <description>&lt;h3&gt;What is the AWS root account?&lt;/h3&gt;

&lt;p&gt;The AWS root account is the account that was used -- or created -- when signing
up with Amazon Web Services. This account has full access to all resources in
the account and it is not possible to alter this configuration.&lt;/p&gt;

&lt;h3&gt;Risks of using the AWS root account&lt;/h3&gt;

&lt;p&gt;Using the AWS root account means that there is potential for its compromise.
In particular, iSEC noticed that AWS customers who use the AWS root account
tend to do the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Share credentials between employees.&lt;/li&gt;
&lt;li&gt;Disable Multi-Factor Authentication (MFA) for convenience.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shared credentials, aside from increasing the risk of compromise during the
sharing process, render credential rotation impractical due to the need for the
newly-generated secret to be known by multiple parties. Sharing the AWS root
account also undermines any effort towards using IAM and leveraging the
fine-grained access controls it offers. Finally, shared credentials result in
loss of the attribution ability, which makes auditing harder and may prevent
successful investigation.&lt;/p&gt;

&lt;h3&gt;AWS Identity and Access Management (IAM)&lt;/h3&gt;

&lt;p&gt;AWS IAM allows account administrators to create users for every employee and
grant them access to a limited set of services, actions, and resources. This
allows AWS account administrators to apply the principle of least privilege,
which dictates that a given user should only be able to access the information
and resources that are necessary for them to perform tasks they are responsible
for. Additionally, use of IAM allows AWS users to rotate credentials and revoke
privileges without impacting other employees.&lt;/p&gt;

&lt;p&gt;AWS account administrators should create an &lt;em&gt;Administrator&lt;/em&gt; IAM group, grant
administrator privileges to this group, and create individual IAM users for
each employee in charge of administrating the AWS account. When done, the AWS
root password should be rotated and stored in a safe manner. Furthermore,
additional credentials such as access keys and certificates should be deleted.&lt;/p&gt;

&lt;h3&gt;Important security consideration about the root account&lt;/h3&gt;

&lt;p&gt;AWS users should always enable MFA on their root account, even when the
password is securely stored; it is important to realize that the password reset
for the root account process only requires access to the email address
associated with this account. &lt;strong&gt;This means that, without MFA, your production
environment is only as secure as an email.&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Feb 2015 08:42:00 -0800</pubDate>
        <link>https://l01cd3v.github.io/aws/2015/02/23/do_not_use_your_root_account.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/aws/2015/02/23/do_not_use_your_root_account.html</guid>
      </item>
    
      <item>
        <title>Announcing the AWS blog post series</title>
        <description>&lt;p&gt;Starting this month, iSEC Partners will start a series of blog posts related to
AWS. The goal of these blog posts will be to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Discuss common security gaps in AWS environments&lt;/li&gt;
&lt;li&gt;Discuss common security gaps in the architecture of applications deployed in
the cloud&lt;/li&gt;
&lt;li&gt;Describe methods and tools used to identify these security gaps&lt;/li&gt;
&lt;li&gt;Share tools and scripts that facilitate daily and secure work with AWS&lt;/li&gt;
&lt;li&gt;Share AWS policies that help improve the security posture of AWS environments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To share material, iSEC created a new public
&lt;a target=&quot;_blank&quot;
href=&quot;https://github.com/iSECPartners/AWS-recipes&quot;&gt;AWS-recipes&lt;/a&gt; repository
on Github. The tools and policies shared in this repository will be discussed
and explained in dedicated blog articles.&lt;/p&gt;

&lt;p&gt;Because iSEC has been assessing the security of AWS environment for several
years, we have a number of ideas and articles in the pipe awaiting to be
written and published. Our target goal is to publish at least on a bi-monthly
basis at the beginning of the project, and adjust this publication rate after
we catch up.&lt;/p&gt;

&lt;p&gt;Without further due, we will start this series with articles that discuss
Identity and Access Management (IAM) common issues and best practices, and will
present a strategy to improve one&amp;#39;s security posture when using AWS.&lt;/p&gt;
</description>
        <pubDate>Sun, 22 Feb 2015 22:24:00 -0800</pubDate>
        <link>https://l01cd3v.github.io/aws/2015/02/22/announcing_the_aws_blog_post_series.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/aws/2015/02/22/announcing_the_aws_blog_post_series.html</guid>
      </item>
    
      <item>
        <title>Intro</title>
        <description>&lt;p&gt;I&amp;#39;m a Security Engineer and, on this blog, I will talk about research projects
I work on, tools that I write and publish, and miscellaneous security and
privacy related subjects.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Feb 2015 17:00:00 -0800</pubDate>
        <link>https://l01cd3v.github.io/2015/02/21/hello_world.html</link>
        <guid isPermaLink="true">https://l01cd3v.github.io/2015/02/21/hello_world.html</guid>
      </item>
    
  </channel>
</rss>
